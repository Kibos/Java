/**
 * Exercise 12: (3) Start with a number that is all binary ones. Left shift it, then use the
 * unsigned right-shift operator to right shift through all of its binary positions, each time
 * displaying the result using Integer.toBinaryString( ).
 */
package net.minixalpha.chap3;

/**
 * @author minix
 *
 */
public class Ex12 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int i = 0xffffffff;
		System.out.println(Integer.toBinaryString(i) + " << 1" + ": "  +
				Integer.toBinaryString((i <<= 1)));
		for (int j=1; j<=32; j++) {
			System.out.println(Integer.toBinaryString(i) + " >>> " + j + ": "  +
					Integer.toBinaryString((i>>>j)));
		}
	}

}

/**
Output:
11111111111111111111111111111111 << 1: 11111111111111111111111111111110
11111111111111111111111111111110 >>> 1: 1111111111111111111111111111111
11111111111111111111111111111110 >>> 2: 111111111111111111111111111111
11111111111111111111111111111110 >>> 3: 11111111111111111111111111111
11111111111111111111111111111110 >>> 4: 1111111111111111111111111111
11111111111111111111111111111110 >>> 5: 111111111111111111111111111
11111111111111111111111111111110 >>> 6: 11111111111111111111111111
11111111111111111111111111111110 >>> 7: 1111111111111111111111111
11111111111111111111111111111110 >>> 8: 111111111111111111111111
11111111111111111111111111111110 >>> 9: 11111111111111111111111
11111111111111111111111111111110 >>> 10: 1111111111111111111111
11111111111111111111111111111110 >>> 11: 111111111111111111111
11111111111111111111111111111110 >>> 12: 11111111111111111111
11111111111111111111111111111110 >>> 13: 1111111111111111111
11111111111111111111111111111110 >>> 14: 111111111111111111
11111111111111111111111111111110 >>> 15: 11111111111111111
11111111111111111111111111111110 >>> 16: 1111111111111111
11111111111111111111111111111110 >>> 17: 111111111111111
11111111111111111111111111111110 >>> 18: 11111111111111
11111111111111111111111111111110 >>> 19: 1111111111111
11111111111111111111111111111110 >>> 20: 111111111111
11111111111111111111111111111110 >>> 21: 11111111111
11111111111111111111111111111110 >>> 22: 1111111111
11111111111111111111111111111110 >>> 23: 111111111
11111111111111111111111111111110 >>> 24: 11111111
11111111111111111111111111111110 >>> 25: 1111111
11111111111111111111111111111110 >>> 26: 111111
11111111111111111111111111111110 >>> 27: 11111
11111111111111111111111111111110 >>> 28: 1111
11111111111111111111111111111110 >>> 29: 111
11111111111111111111111111111110 >>> 30: 11
11111111111111111111111111111110 >>> 31: 1
11111111111111111111111111111110 >>> 32: 11111111111111111111111111111110
*/