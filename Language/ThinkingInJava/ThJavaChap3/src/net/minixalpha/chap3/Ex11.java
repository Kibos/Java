/**
 * Exercise 11: (3) Start with a number that has a binary one in the most significant
 * position (hint: Use a hexadecimal constant). Using the signed right-shift operator, right shift
 * it all the way through all of its binary positions, each time displaying the result using

 */
package net.minixalpha.chap3;

/**
 * @author minix
 *
 */
public class Ex11 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int orii = 0x80000000;
		int i = 0x80000000;
		int j = 1;
		while (j <= 32) {
			System.out.println(Integer.toBinaryString(orii) + " >> " + j + ": " + Integer.toBinaryString((i >> j)));
			j = j + 1;
		}
	}

}

/**
 * Output:
10000000000000000000000000000000 >> 1: 11000000000000000000000000000000
10000000000000000000000000000000 >> 2: 11100000000000000000000000000000
10000000000000000000000000000000 >> 3: 11110000000000000000000000000000
10000000000000000000000000000000 >> 4: 11111000000000000000000000000000
10000000000000000000000000000000 >> 5: 11111100000000000000000000000000
10000000000000000000000000000000 >> 6: 11111110000000000000000000000000
10000000000000000000000000000000 >> 7: 11111111000000000000000000000000
10000000000000000000000000000000 >> 8: 11111111100000000000000000000000
10000000000000000000000000000000 >> 9: 11111111110000000000000000000000
10000000000000000000000000000000 >> 10: 11111111111000000000000000000000
10000000000000000000000000000000 >> 11: 11111111111100000000000000000000
10000000000000000000000000000000 >> 12: 11111111111110000000000000000000
10000000000000000000000000000000 >> 13: 11111111111111000000000000000000
10000000000000000000000000000000 >> 14: 11111111111111100000000000000000
10000000000000000000000000000000 >> 15: 11111111111111110000000000000000
10000000000000000000000000000000 >> 16: 11111111111111111000000000000000
10000000000000000000000000000000 >> 17: 11111111111111111100000000000000
10000000000000000000000000000000 >> 18: 11111111111111111110000000000000
10000000000000000000000000000000 >> 19: 11111111111111111111000000000000
10000000000000000000000000000000 >> 20: 11111111111111111111100000000000
10000000000000000000000000000000 >> 21: 11111111111111111111110000000000
10000000000000000000000000000000 >> 22: 11111111111111111111111000000000
10000000000000000000000000000000 >> 23: 11111111111111111111111100000000
10000000000000000000000000000000 >> 24: 11111111111111111111111110000000
10000000000000000000000000000000 >> 25: 11111111111111111111111111000000
10000000000000000000000000000000 >> 26: 11111111111111111111111111100000
10000000000000000000000000000000 >> 27: 11111111111111111111111111110000
10000000000000000000000000000000 >> 28: 11111111111111111111111111111000
10000000000000000000000000000000 >> 29: 11111111111111111111111111111100
10000000000000000000000000000000 >> 30: 11111111111111111111111111111110
10000000000000000000000000000000 >> 31: 11111111111111111111111111111111
10000000000000000000000000000000 >> 32: 10000000000000000000000000000000
 */
